name: Worker E2E Test

on:
  workflow_dispatch:
    inputs:
      baseUrl:
        description: 'Deployed Web Base URL (e.g. https://your-site.vercel.app)'
        required: true
      timeoutSeconds:
        description: 'Max seconds to wait for job completion'
        required: false
        default: '300'

jobs:
  run-test:
    runs-on: ubuntu-latest
    steps:
      - name: Enqueue job via web endpoint
        id: enqueue
        run: |
          set -euo pipefail
          BASE_URL="${{ github.event.inputs.baseUrl }}"
          RESP=$(curl -sS -X POST "$BASE_URL/api/test-enqueue" -H 'Content-Type: application/json')
          echo "Response: $RESP"
          OK=$(echo "$RESP" | jq -r .ok)
          if [ "$OK" != "true" ]; then
            echo "Failed to enqueue: $RESP" >&2
            exit 1
          fi
          JOB_ID=$(echo "$RESP" | jq -r .jobId)
          echo "jobId=$JOB_ID" >> "$GITHUB_OUTPUT"

      - name: Poll Supabase for job completion
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          TIMEOUT: ${{ github.event.inputs.timeoutSeconds }}
        run: |
          set -euo pipefail
          if [ -z "${SUPABASE_URL:-}" ] || [ -z "${SUPABASE_SERVICE_ROLE_KEY:-}" ]; then
            echo 'Missing SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY secret' >&2
            exit 1
          fi
          JOB_ID="${{ steps.enqueue.outputs.jobId }}"
          echo "Polling job $JOB_ID up to $TIMEOUT seconds"
          START=$(date +%s)
          while true; do
            NOW=$(date +%s)
            ELAPSED=$((NOW-START))
            if [ "$ELAPSED" -ge "$TIMEOUT" ]; then
              echo "Timeout waiting for job $JOB_ID" >&2
              exit 1
            fi
            RESP=$(curl -sS "$SUPABASE_URL/rest/v1/jobs?id=eq.$JOB_ID" \
              -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
              -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY")
            STATUS=$(echo "$RESP" | jq -r '.[0].status // empty')
            echo "Status: $STATUS"
            if [ "$STATUS" = "succeeded" ]; then
              echo "Job succeeded"
              break
            fi
            if [ "$STATUS" = "failed" ]; then
              echo "Job failed: $(echo "$RESP" | jq -r '.[0].error // ""')" >&2
              exit 1
            fi
            sleep 5
          done


